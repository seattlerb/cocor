require 'BitSet'
require 'module-hack'

class Token
  attr_accessor :kind, :pos, :col, :line, :val

  def initialize
    @val = ""
    @kind = @pos = @col = @line = 0
  end

  def clone
    return Marshal.load(Marshal.dump(self))
  end

  def ==(o)
    ! o.nil? &&
      @kind == o.kind &&
      @pos == o.pos &&
      @col == o.col &&
      @line == o.line &&
      @val == o.val
  end

  def to_s
    "<Token@#{self.id}: \"#{@val}\" k=#{@kind}, p=#{@pos}, c=#{@col}, l=#{@line}>"
  end

end

class Buffer

  # TODO: switch these to instance variables and clean this shit up
  @@buf = ""
  @@bufLen = 0
  @@pos = 0

  # cls_attr_accessor :pos
  def self.pos
    @@pos
  end
  
  def self.Fill(name)
    @@buf = File.new(name).read
    @@bufLen = @@buf.size
  end
  
  def self.Set(position)
    if (position < 0) then
      position = 0
    elsif (position >= @@bufLen) then
      position = @@bufLen
    end
    @@pos = position
  end
  
  def self.read
    c = 0
    if (@@pos < @@bufLen) then
      c = @@buf[@@pos]
      @@pos += 1
    else
      c = 65535				# FIX!!!
    end
    return c
  end
end

class Scanner

  @@err = nil					# error messages

  EOF = 0					# TODO: verify... 
  CR = "\r"[0]
  NL = "\n"[0]					# FIX: this sucks
  EOL = NL
  MAXASCII = 127				# FIX: this is dumb
  MAXCHR = 65535				# FIX: not ruby compatible
  SPACE = ' '[0]

-->declarations

  # TODO: make fucking sure these become instance vars
  private
  @@t=Token.new			# current token
  @@ch=nil			# current input character
  @@pos=0			# position of current character
  @@line=0			# line number of current character
  @@lineStart=0			# start position of current line
  @@oldEols=0			# >0: no. of EOL in a comment
  @@ignore=BitSet.new(128)	# set of characters to be ignored by the scanner

  public 

  def self.err			# HACK: added because @@err was accessed from Parser.rb
    @@err
  end

  def self.Init(file, e=ErrorStream.new)
    @@ignore = BitSet.new(128)
-->initialization
    @@err = e
    Buffer.Fill(file)
    @@pos = -1
    @@line = 1
    @@lineStart = 0
    @@oldEols = 0
    self.NextCh
  end
	
  def self.NextCh
    if (@@oldEols > 0) then
      @@ch = EOL
      @@oldEols -= 1
    else
      @@ch = Buffer.read
      @@pos += 1
      if (@@ch==NL || @@ch==CR) then
	@@line += 1
	@@lineStart = @@pos + 1
      end
    end
    if (@@ch > MAXASCII) then
      if (@@ch == MAXCHR) then
	@@ch = EOF
      else
	$stderr.puts("-- invalid character (#{@@ch}) at line #{@@line} col #{@@pos - @@lineStart}")
	@@ch = SPACE
      end
    end
  end
	
-->comment
	
  def self.CheckLiteral
    case (@@t.val[0])
-->literals
    end
  end

  def self.Scan
    buf=""
    self.NextCh while @@ignore.get(@@ch)
-->scan1
    @@t = Token.new
    @@t.pos = @@pos
    @@t.col = @@pos - @@lineStart
    @@t.line = @@line 
    @@t.kind = "FIX"
    buf = ""
    state = @@start[@@ch]
    apx = 0

    while true
      buf += @@ch.chr unless @@ch < 0
      self.NextCh
#      $stderr.puts "state = #{state}, ch = #{@@ch} / '#{@@ch.chr}'"
      case state
      when 0				# NextCh already done
	@@t.kind = @@noSym
	break
-->scan2
	break
      end
    end
#    puts "buf = '#{buf}' state = #{state} line=#{@@t.line} col=#{@@t.col} "
    @@t.val = buf.to_s

    raise "kind not set for Token" unless @@t.kind and @@t.kind != "FIX"

#    puts @@t

    return @@t
  end
end

$$$
