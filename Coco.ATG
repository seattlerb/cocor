$0123456789
/* Coco/R
   This grammar produces LL1 warnings for Attribs and AttrDecl, which can be ignored.
*/
COMPILER Coco

	private; @@ident = 0
	private; @@string = 1
	private; @@genScanner = nil

	private; def Parser.SemErr(n)
		Scanner.err.SemErr(n, @t.line, @t.col)
	end
	
	private; def Parser.SetCtx(p) # set transition code to contextTrans
		until (p.nil?)
			# TODO: make a case statement or refactor better
			if (p.typ==Node::Chr || p.typ==Node::Clas) then
				p.code = Node::ContextTrans
			elsif (p.typ==Node::Opt || p.typ==Node::Iter) then
				SetCtx(p.sub)
			elsif (p.typ==Node::Alt) then
				SetCtx(p.sub)
				SetCtx(p.down)
			end
			break if p.up
			p = p.nxt
		end
	end
	
	private; def Parser.SetDDT(s)
		for i in 1..(s.length-1)
		  ch = s[i]
		  if (ch >= ?0 && ch <= ?9) then
		    Tab.ddt[ch - ?0] = true
		  end
		end
	end
	
	private; def Parser.FixString(s)
		a=s # TODO: remove a
		len = a.length
		if (len == 2) then
		  SemErr(29)
		end
		dbl = false
		for i in 1..(len-1)
		  if (a[i]=='"') then
		    dbl = true
		  elsif (a[i]==' ') then
		    SemErr(24)
		  end
		end
		if (!dbl) then
		  a[0] = '"'
		  a[len-1] = '"'
		end

		return a.clone
	end
	
# -------------------------------------------------------------------------

CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit    = "0123456789".
  eol      = CHR(13) + CHR(10).
  tab      = CHR(9).
  noQuote1 = ANY - '"' - eol.
  noQuote2 = ANY - "'" - eol.

IGNORE eol + tab


TOKENS
  ident     = letter {letter | digit}.
  string    = '"' {noQuote1} '"' | "'" {noQuote2} "'".
  number    = digit {digit}.
  badString = '"' {noQuote1} eol | "'" {noQuote2} eol.


PRAGMAS
  ddtSym   = "$" {digit}.	(. SetDDT(@t.val) .)


COMMENTS FROM "/*" TO "*/" NESTED

/* ------------------------------------------------------------------------- */

PRODUCTIONS

Coco                            (. gramLine = sp = eofSy = 0
                                   undefined = noAttrs = noRet = ok = ok1 = false
                                   gramName = ""
                                   sym = nil
                                   g = nil
				.)
=
  "COMPILER"                    (. gramLine = @token.line
                                   eofSy = Sym.new(Node::T, "EOF", 0)
                                   @@genScanner = true
                                   ok = true
                                   Tab.ignored = BitSet.new()
				.) 
  ident                         (. gramName = @token.val
                                   beg = @t.pos
				.)
  {ANY}                         (. Tab.semDeclPos = Position.new(beg, @t.pos-beg, 0)
				.)
  { Declaration }
                                SYNC 
  "PRODUCTIONS"                 (. Tab.ignored.set(32)	#' ' is always ignored
                                   if (@@genScanner) then
					ok = DFA.MakeDeterministic()
				   end
                                   Node.EraseNodes
				.)
  { ident                       (. sym = Sym.Find(@token.val)
                                   undefined = sym == Sym::NoSym
                                   if (undefined) then
                                       sym = Sym.new(Node::Nt, @token.val, @token.line)
                                   else 
                                       if (sym.typ==Node::Nt) then
					   unless sym.graph.nil? then
					      SemErr(7)
					   end
                                       else
					 SemErr(8)
				       end
                                       sym.line = @token.line
                                   end
                                   noAttrs = sym.attrPos.nil?
				   sym.attrPos = nil
                                   noRet = sym.retVar.nil? || sym.retVar.empty?
				   sym.retVar = nil
				.)
    [ AttrDecl <sym> ]          (. if (!undefined) then
                                     if ((noAttrs  && !sym.attrPos.nil?) || 
				         (noRet    && !sym.retVar.nil?) || 
					 (!noAttrs && sym.attrPos.nil?) || 
					 (!noRet   && sym.retVar .nil?)) then
				       SemErr(5)
				     end
				   end
                                   .)
    [ SemText <^sym.semPos> ] 
    WEAK "="
    Expression <^g>             (. sym.graph = g.l
                                   Graph.CompleteGraph(g.r)
				.) 
    WEAK "."
  }                             (. if (Tab.ddt[2]) then
				     Node.PrintNodes()
				   end
                                   Tab.gramSy = Sym.Find(gramName)
                                   if (Tab.gramSy==Sym::NoSym) then
				       SemErr(11)
                                   else
                                       sym = Tab.gramSy
                                       unless (sym.attrPos.nil?) then
				         SemErr(12)
				       end
                                   end
				.)
  "END" ident                   (. if (gramName != @token.val) then
					 SemErr(17)
				   end
                                   if (Scanner.err.count == 0) then
                                       puts("checking"); STDOUT.flush
                                       Tab.CompSymbolSets()
                                       if (ok) then
					 ok = Tab.NtsComplete()
				       end
                                       if (ok) then
                                           ok1 = Tab.AllNtReached()
                                           ok = Tab.NoCircularProductions()
                                       end
                                       if (ok) then
					 ok = Tab.AllNtToTerm()
				       end
                                       if (ok) then
					 ok1 = Tab.LL1()
				       end
                                       if (Tab.ddt[7]) then
					 Tab.XRef()
				       end
                                       if (ok) then
                                           print("parser"); STDOUT.flush()
                                           ParserGen.WriteParser()
                                           if (@@genScanner) then
                                               print(" + scanner"); STDOUT.flush()
                                               ok = DFA.WriteScanner()
                                               if (Tab.ddt[0]) then
					         DFA.PrintStates()
					       end
                                           end
                                           puts(" generated"); STDOUT.flush
                                           if (Tab.ddt[8]) then
					     ParserGen.WriteStatistics()
					   end
                                       end
                                   else
				     ok = false
				   end
                                   if (Tab.ddt[6]) then
					Tab.PrintSymbolTable()
				   end
                                   puts
				.)
  ".".
/*------------------------------------------------------------------------------------*/
Declaration                     (. g1 = g2 = nil
				   nested = false
				.)
=
  "CHARACTERS" { SetDecl }
| "TOKENS"     { TokenDecl <Node::T> }
| "PRAGMAS"    { TokenDecl <Node::Pr> }
| "COMMENTS"
  "FROM" TokenExpr <^g1>
  "TO" TokenExpr <^g2>
  ( "NESTED"                    (. nested = true .)
  |                             (. nested = false .)
  )                             (. Comment.new(g1.l, g2.l, nested) .)
| "IGNORE" Set <^Tab.ignored>
.

/*------------------------------------------------------------------------------------*/
SetDecl                         (. c = 0
				   s = nil
				   name = ""
				.)
=
  ident                         (. name = @token.val
                                   c = CharClass.Find(name)
                                   SemErr(7) unless c.nil?
				.)
  "=" Set <^s>                  (. c = CharClass.new(name, s) .)
  ".".
/*------------------------------------------------------------------------------------*/
Set <^BitSet s>                 (. s2 = nil .)
=
  SimSet <^s>
  { "+" SimSet <^s2>            (. s.or(s2) .)
  | "-" SimSet <^s2>            (. Sets.Differ(s, s2) .)
  }.
/*------------------------------------------------------------------------------------*/
SimSet <^BitSet s>              (. name = ""
				   c = n = 0
				.)
=
                                (. s = BitSet.new(128) .)
( ident                         (. c = CharClass.Find(@token.val)
                                   if c.nil? then
				     SemErr(15)
				   else
				     s.or(c.set)
				   end
				.)
| string                        (. name = @token.val
				   i=1
                                   while (name[i] != name[0]) do
                                     s.set(name[i])
				     i += 1
				   end
				.)
| "CHR" "(" number              (. n = @token.val.to_i
                                   s.set(n)
				.)
  ")"
| "ANY"                         (. s = Sets.FullSet(127) .)
)
.
/*------------------------------------------------------------------------------------*/
TokenDecl <int typ>             (. s = pos = g = nil
				   sp = 0
				 .)
=
  Symbol <^name, ^kind>         (. if (Sym.Find(name) != Sym::NoSym) then
				     SemErr(7)
				     sp = 0
                                   else
                                     sp = Sym.new(typ, name, @token.line)
                                     sp.graph = Sym::ClassToken # TODO: tokenKind
                                   end
				 .)
  SYNC
  ( "=" TokenExpr <^g> "."      (. if (kind != @@ident) then
				     SemErr(13)
				   end
                                   Graph.CompleteGraph(g.r)
                                   DFA.ConvertToStates(g.l, sp)
				 .)
  |                             (. if (kind==@@ident) then
				     @@genScanner = false
                                   else
				     DFA.MatchLiteral(sp)
				   end
				.)
  )
  [ SemText <^pos>              (. if (typ==Node::T) then
				     SemErr(14)
				   end
                                   sp.semPos = pos
				 .)
  ].
/*------------------------------------------------------------------------------------*/
AttrDecl <Sym sym>		(. beg = col = 0
				   buf = nil
				   buf2 = []
				 .)
=
  "<"
  { "^"
    ident                       (. buf = @token.val.clone .)
    ident                       (. buf2 << @token.val.dup
    				   sym.retType = buf.to_s
				 .)
    [","]
  }                             (. sym.retVar = buf2.join(', ') unless buf2.empty?
  				   beg = @t.pos
  				   col = @t.col
				 .)
  { ANY }
  ">"                           (. if (@token.pos > beg) then
                                     sym.attrPos = Position.new(beg, @token.pos - beg, col)
                                   end
				 .).
/*------------------------------------------------------------------------------------*/
Expression <^Graph g>           (. g2 = nil
	   	   		   first = false
				 .)
=
  Term <^g>                     (. first = true .)
  { WEAK "|"
    Term <^g2>                  (. if (first) then
				     g = Graph.FirstAlt(g)
				     first = false
				   end
                                   g = Graph.Alternative(g, g2)
				 .)
  }.
/*------------------------------------------------------------------------------------*/
Term<^Graph g>                  (. g2 = nil .)
=                               (. g = nil .)
  ( Factor <^g>
    { Factor <^g2>              (. g = Graph.Sequence(g, g2) .)
    }
  |                             (. g = Graph.new()
                                   g.l = Node.new(Node::Eps, 0, 0)
                                   g.r = g.l
				 .)
  ).
/*------------------------------------------------------------------------------------*/
Factor <^Graph g>               (. n = s = sym = pos = set = nil
				   sp = typ = 0
				   undefined = weak = false
				 .)
=
                                (. g = Graph.new()
				   weak = false
				 .)
( [ "WEAK"                      (. weak = true .)
  ]
  Symbol <^name, ^kind>         (. sp = Sym.Find(name)
				   undefined = sp==Sym::NoSym
                                   if (undefined) then
                                       if (kind==@@ident) then
                                           sp = Sym.new(Node::Nt, name, 0) # forward nt
                                       elsif (@@genScanner) then
                                           sp = Sym.new(Node::T, name, @token.line)
                                           DFA.MatchLiteral(sp)
                                       else # undefined string in production
                                           SemErr(6) 
					   sp = nil
                                       end
                                   end
				   sym = sp # FIX
				   typ = sym.typ
                                   if (typ!=Node::T && typ!=Node::Nt) then
				     SemErr(4)
				   end
                                   if (weak) then
                                       if (sym.typ==Node::T) then
				         typ = Node::Wt
				       else
				         SemErr(23)
				       end
				   end
                                   g.l = Node.new(typ, sp, @token.line)
				   g.r = g.l
                                   n = g.l
				 .)
  [ Attribs <n>                 (. if (kind!=@@ident) then
    	    			     SemErr(3)
				   end
				 .)
  ]                             (. if (undefined) then
                                     sym.attrPos = n.pos
				     sym.retVar  = n.retVar # dummies
                                   else
                                     if ((!n.pos.nil?    &&  sym.attrPos.nil?) ||
				         (!n.retVar.nil? &&  sym.retVar.nil?) ||
					 ( n.pos.nil?    && !sym.attrPos.nil?) ||
					 ( n.retVar.nil? && !sym.retVar.nil?)) then
				       SemErr(5)
				     end
                                   end
				 .)
/* TODO - it would be really nice to support ()* and ()+ */
| "(" Expression <^g> ")"
| "[" Expression <^g> "]"       (. g = Graph.Option(g) .)
| "{" Expression <^g> "}"       (. g = Graph.Iteration(g) .)
| SemText <^pos>                (. g.l = Node.new(Node::Sem, 0, 0)
                                   g.r = g.l
                                   n = g.l
				   n.pos = pos
				 .)
| "ANY"                         (. set = Sets.FullSet(Tab::MaxTerminals)
                                   set.clear(Sym::EofSy)
                                   g.l = Node.new(Node::Any, Tab.NewSet(set), 0)
                                   g.r = g.l
				 .)
| "SYNC"                        (. g.l = Node.new(Node::Sync, 0, 0)
                                   g.r = g.l
				 .)
).
/*------------------------------------------------------------------------------------*/
TokenExpr <^Graph g>            (. g2 = nil
				   first = false
				 .)
=
  TokenTerm <^g>                (. first = true .)
  { WEAK "|"
    TokenTerm <^g2>             (. if (first) then
				     g = Graph.FirstAlt(g)
				     first = false
				   end
                                   g = Graph.Alternative(g, g2)
				 .)
  }.
/*------------------------------------------------------------------------------------*/
TokenTerm <^Graph g>            (. g2 = nil .)
=
  TokenFactor <^g>
  { TokenFactor <^g2>           (. g = Graph.Sequence(g, g2) .)
  }
  [ "CONTEXT"
    "(" TokenExpr <^g2>         (. SetCtx(g2.l)
				   g = Graph.Sequence(g, g2)
				 .)
    ")"
  ].
/*------------------------------------------------------------------------------------*/
TokenFactor <^Graph g>          (. name = s = nil
				   kind = c = 0
				 .)
=
                                (. g = Graph.new .)
( Symbol <^name, ^kind>         (. if (kind==@@ident) then
                                     c = CharClass.Find(name)
                                     if c.nil? then
                                       SemErr(15)
                                       c = CharClass.new(name)
                                     end
                                     g.l = Node.new(Node::Clas, c.n, 0)
                                     g.r = g.l
                                   else # string
				     g = Graph.StrToGraph(name)
				   end
				.)
| "(" TokenExpr <^g> ")"
| "[" TokenExpr <^g> "]"        (. g = Graph.Option(g) .)
| "{" TokenExpr <^g> "}"        (. g = Graph.Iteration(g) .)
).
/*------------------------------------------------------------------------------------*/
Symbol <^String name, ^int kind>
=				(. name = "???"
				   kind = @@ident
				 .)
  ( ident                       (. name = @token.val .)
  | string                      (. name = FixString(@token.val)
    				   kind = @@string
				 .)
  ).

/*------------------------------------------------------------------------------------*/
Attribs <Node n>                (. beg = col = 0; buf = [] .)
= 
  "<"
  ( "^"                         (. beg = @t.pos .)
    { ANY }			(. buf << ParserGen.GetString(beg, @t.pos) .)
    { ","
      "^"			(. beg = @t.pos .)
      { ANY }			(. buf << ParserGen.GetString(beg, @t.pos) .)
    }
    ( "," AttrRest<n>
    | ">"
    )				(. n.retVar = buf.join(', ') if ! buf.empty? .)
  | AttrRest<n>
  ).

/*------------------------------------------------------------------------------------*/
AttrRest <Node n>               (. beg = col = 0 .)
=
                                (. beg = @t.pos
				   col = @t.col
				 .)
  { ANY }
  ">"                           (. if (@token.pos > beg) then
                                     n.pos = Position.new(beg, @token.pos - beg, col)
                                   end
				.).

/*------------------------------------------------------------------------------------*/
SemText <^Position pos> =
  "(."                          (. beg = @t.pos
				   col = @t.col
				 .)
  { ANY
  | badString                   (. SemErr(18) .)
  | "(."                        (. SemErr(19) .)
  }
  ".)"                          (. pos = Position.new(beg, @token.pos - beg, col)
  				 .).

END Coco.
